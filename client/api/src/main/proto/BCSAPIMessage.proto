syntax = "proto3";

package org.hyperledger.api;

message Script {
    bytes script = 1;
}

message Ping {
    uint64 nonce = 1;
    string clientVersion = 2;
    string serverVersion = 3;
}

message Alert {
    string alert = 1;
    uint32 severity = 2; // 0: info, 1: warning, 2: error
}

// input point of a transaction. 
message TXIN {
    bytes source = 1; // source transaction hash
    uint32 sourceix = 2; // index of the output in the source stransaction
    uint32 sequence = 3; // higher wins
    bytes script = 4; // inputs to the script of the transaction output
}

// output point of a transaction. 
message TXOUT {
    uint64 value = 1; // value that can be claimed ...
    bytes script = 2; // ... if satisfying this output script
    bytes color = 3;
    uint64 quantity = 4;
    bool hasColor = 5;
}

// a transaction.
message TX {
    uint32 version = 1;
    uint32 locktime = 2; // block number or time this is valid from
    repeated TXIN inputs = 3;
    repeated TXOUT outputs = 4;
    bytes block = 5;
    bool hasBlock = 6;
}



message TXS {
    repeated OPTIONAL_TX txs = 1;
}

message OPTIONAL_TX {
    bool isNull = 1;
    TX transaction = 2;
}

message MerkleNode {
    TX transaction = 1;
    bytes hash = 2; // suffixed with one byte heigh
    bool hasHash = 3;
}

// a block.
// matches the P2P Bitcoin protocol message
message BLK {
    uint32 version = 1;
    bytes previousBlock = 2; // previos block hash
    bytes merkleRoot = 3; // block content hash tree root
    uint32 timestamp = 4; // the block was mined at
    uint32 difficulty = 5; // encoded difficulty for POW
    uint32 nonce = 6; // parameter of POW
    repeated MerkleNode transactions = 7;
    uint32 height = 8;
    bool hasHeight = 9;
}

// chain height
message HEIGHT {
    uint32 height = 1;
}

// block ids request
message BLKIDSREQ {
    bytes blockHash  = 1; // block hash to start from
    uint32 count = 2; // the number of blocks to list
    bool hasBlockHash = 3;
}

message BLKIDS {
    repeated bytes blockIds  = 1; // block hash to start from
    bytes previousBlockId = 2; // id of the block after the block ids
    uint32 height = 3; // height of the first block in the block ids
    bool hasPreviousBlockId = 4;
}

message Hash {
    repeated bytes hash = 1;
}

message CatchUpRequest {
    uint32 limit = 1;
    bool headers = 2;
    repeated bytes inventory = 3;
}

message TrunkUpdate {
    repeated BLK added = 1;
}

message ExceptionMessage {
    repeated string message = 1;
}

message ExactMatchRequest {
    repeated bytes match = 1;
    uint64 after = 2;
    bool hasAfter = 3;
}

message AccountRequest {
    string publicKey = 1;
    uint32 lookAhead = 2;
}

message Reject {
    string command = 1;
    string reason = 2;
    uint32 rejectCode = 3;
    bytes hash = 4;
}

message EmptyResult {
}

service BlockchainApi {
    // APIBlockIdList getBlockIds(BID blockId, int count) throws BCSAPIException;
    rpc GetBlockIds(BLKIDSREQ) returns (BLKIDS);

    // APIBlock getBlock(BID hash) throws BCSAPIException;
    rpc GetBlock(Hash) returns (BLK);

    // APITransaction getTransaction(TID hash) throws BCSAPIException;
    rpc GetTransaction(Hash) returns (TX);

    // void sendTransaction(Transaction transaction) throws BCSAPIException;
    rpc SendTransaction(TX) returns (EmptyResult);

    // void registerTransactionListener(TransactionListener listener) throws BCSAPIException;
    // Hash is the hashcode which identifies the listener
    rpc RegisterTransactionListener(Hash) returns (EmptyResult);

    // public void removeTransactionListener(TransactionListener listener);
    // Hash is the hashcode which identifies the listener
    rpc RemoveTransactionListener(Hash) returns (EmptyResult);
}

